# Quantum's Ingress Configuration - High-Performance SSL Termination
# Advanced traffic management with security headers and rate limiting

# Nginx Ingress Controller with Custom Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  # Performance Optimizations
  worker-processes: "auto"
  worker-connections: "16384"
  worker-rlimit-nofile: "65535"
  worker-shutdown-timeout: "240s"
  
  # SSL Configuration
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "true"
  ssl-session-cache: "shared:SSL:10m"
  ssl-session-cache-size: "10m"
  ssl-session-timeout: "10m"
  ssl-session-tickets: "false"
  ssl-buffer-size: "4k"
  
  # Security Headers
  add-headers: "ingress-nginx/custom-headers"
  
  # Performance Settings
  keepalive-timeout: "65"
  keepalive-requests: "1000"
  client-max-body-size: "10m"
  client-body-buffer-size: "128k"
  client-header-buffer-size: "1k"
  large-client-header-buffers: "4 8k"
  client-body-timeout: "60s"
  client-header-timeout: "60s"
  send-timeout: "60s"
  
  # Compression
  enable-brotli: "true"
  brotli-level: "6"
  brotli-types: "text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap"
  
  # Rate Limiting
  limit-rate-after: "1024"
  limit-rate: "1024"
  
  # Logging
  log-format-upstream: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id'
  
  # HSTS
  hsts: "true"
  hsts-max-age: "31536000"
  hsts-include-subdomains: "true"
  hsts-preload: "true"
  
  # OCSP
  enable-ocsp: "true"
  
  # Custom Error Pages
  custom-http-errors: "404,403,500,502,503,504"
  
  # Modsecurity
  enable-modsecurity: "true"
  enable-owasp-modsecurity-crs: "true"
  
  # Real IP
  use-forwarded-headers: "true"
  compute-full-forwarded-for: "true"
  use-proxy-protocol: "false"
  
  # Upstream configuration
  upstream-keepalive-connections: "320"
  upstream-keepalive-requests: "10000"
  upstream-keepalive-timeout: "60s"
  upstream-max-fails: "3"
  upstream-fail-timeout: "10s"
---
# Custom Security Headers
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-headers
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  X-Frame-Options: "DENY"
  X-Content-Type-Options: "nosniff"
  X-XSS-Protection: "1; mode=block"
  Referrer-Policy: "strict-origin-when-cross-origin"
  Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https:; frame-ancestors 'none';"
  Permissions-Policy: "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()"
  Cross-Origin-Embedder-Policy: "require-corp"
  Cross-Origin-Opener-Policy: "same-origin"
  Cross-Origin-Resource-Policy: "same-site"
---
# Production Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: astral-planner-ingress
  namespace: astral-planner-production
  labels:
    app.kubernetes.io/name: astral-planner
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: astral-planner
  annotations:
    # Nginx Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Authentication Rate Limiting
    nginx.ingress.kubernetes.io/limit-rps: "5"
    nginx.ingress.kubernetes.io/limit-rpm: "300"
    nginx.ingress.kubernetes.io/limit-connections: "20"
    
    # SSL Configuration
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # Certificate Management
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    cert-manager.io/acme-challenge-type: "http01"
    
    # Performance Optimizations
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    
    # WebSocket Support
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/websocket-services: "astral-planner-app"
    
    # Session Affinity
    nginx.ingress.kubernetes.io/session-cookie-name: "astral-planner-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "3600"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "3600"
    nginx.ingress.kubernetes.io/session-cookie-path: "/"
    nginx.ingress.kubernetes.io/session-cookie-secure: "true"
    
    # Security
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/modsecurity-transaction-id: "$request_id"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecAuditEngine RelevantOnly
      SecAuditLog /dev/stdout
      SecAuditLogFormat JSON
      SecRule ARGS "@detectSQLi" \
        "id:1001,\
        phase:2,\
        block,\
        msg:'SQL Injection Attack Detected',\
        logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
        tag:'application-multi',\
        tag:'language-multi',\
        tag:'platform-multi',\
        tag:'attack-sqli'"
    
    # Custom Configuration
    nginx.ingress.kubernetes.io/server-snippet: |
      location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
      }
      
      location /_next/static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "STATIC";
      }
      
      location /api/auth/ {
        limit_req zone=auth burst=5 nodelay;
        limit_req_status 429;
      }
      
      location /api/ {
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
      }
    
    # Configuration Snippet
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      
      # API rate limiting zones
      limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
      limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
      
      # Real IP configuration
      real_ip_header X-Forwarded-For;
      real_ip_recursive on;
      set_real_ip_from 10.0.0.0/8;
      set_real_ip_from 172.16.0.0/12;
      set_real_ip_from 192.168.0.0/16;
spec:
  tls:
  - hosts:
    - astral-planner.com
    - www.astral-planner.com
    - api.astral-planner.com
    secretName: astral-planner-tls
  
  rules:
  # Main Application
  - host: astral-planner.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: astral-planner-app
            port:
              number: 80
  
  # WWW Redirect
  - host: www.astral-planner.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: astral-planner-app
            port:
              number: 80
  
  # API Subdomain
  - host: api.astral-planner.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: astral-planner-app-internal
            port:
              number: 3000
---
# Staging Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: astral-planner-ingress
  namespace: astral-planner-staging
  labels:
    app.kubernetes.io/name: astral-planner
    app.kubernetes.io/instance: staging
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: astral-planner
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    
    # More relaxed rate limiting for staging
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "20"
    
    # Basic Auth for staging environment
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: staging-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Astral Planner Staging - Authentication Required"
spec:
  tls:
  - hosts:
    - staging.astral-planner.com
    - staging-api.astral-planner.com
    secretName: astral-planner-staging-tls
  
  rules:
  - host: staging.astral-planner.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: astral-planner-app
            port:
              number: 80
  
  - host: staging-api.astral-planner.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: astral-planner-app-internal
            port:
              number: 3000
---
# Certificate Issuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@astral-planner.com
    privateKeySecretRef:
      name: letsencrypt-production
    solvers:
    - http01:
        ingress:
          class: nginx
          podTemplate:
            spec:
              nodeSelector:
                "kubernetes.io/os": linux
    - dns01:
        route53:
          region: us-east-1
          accessKeyID: AKIAIOSFODNN7EXAMPLE
          secretAccessKeySecretRef:
            name: route53-credentials-secret
            key: secret-access-key
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: issuer
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@astral-planner.com
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx
    - dns01:
        route53:
          region: us-east-1
          accessKeyID: AKIAIOSFODNN7EXAMPLE
          secretAccessKeySecretRef:
            name: route53-credentials-secret
            key: secret-access-key
---
# Basic Auth Secret for Staging
apiVersion: v1
kind: Secret
metadata:
  name: staging-basic-auth
  namespace: astral-planner-staging
type: Opaque
data:
  # htpasswd -nb admin stagingpassword | base64
  auth: YWRtaW46JGFwcjEkLkh1VEdFTGkkWUZQTThVOXh6TS9hOGxXWmRGdGtnMAo=
---
# Middleware for Additional Security
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: security-headers
  namespace: astral-planner-production
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"
    customResponseHeaders:
      X-Frame-Options: "DENY"
      X-Content-Type-Options: "nosniff"
      X-XSS-Protection: "1; mode=block"
      Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
      Referrer-Policy: "strict-origin-when-cross-origin"
      Permissions-Policy: "camera=(), microphone=(), geolocation=()"
    contentSecurityPolicy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https:; frame-ancestors 'none';"
---
# Rate Limiting Middleware
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: rate-limit
  namespace: astral-planner-production
spec:
  rateLimit:
    average: 100
    period: 1m
    burst: 200
    sourceCriterion:
      ipStrategy:
        depth: 1
        excludedIPs:
        - 127.0.0.1/32
        - 10.0.0.0/8