# Quantum's Grafana Configuration - Advanced Observability Dashboard
# Enterprise-grade visualization with custom dashboards and alerting

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: configuration
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    reporting_enabled = false
    
    [security]
    admin_user = admin
    admin_password = ${GRAFANA_ADMIN_PASSWORD}
    cookie_secure = true
    cookie_samesite = strict
    content_security_policy = true
    strict_transport_security = true
    x_content_type_options = true
    x_xss_protection = true
    
    [server]
    protocol = http
    http_port = 3000
    domain = grafana.astral-planner.com
    root_url = https://grafana.astral-planner.com
    serve_from_sub_path = false
    enable_gzip = true
    
    [database]
    type = postgres
    host = ${DATABASE_HOST}:5432
    name = grafana
    user = ${DATABASE_USER}
    password = ${DATABASE_PASSWORD}
    ssl_mode = require
    
    [session]
    provider = redis
    provider_config = addr=${REDIS_HOST}:6379,pool_size=100,db=grafana,ssl=false
    cookie_name = grafana_sess
    cookie_secure = true
    session_life_time = 86400
    gc_interval_time = 86400
    
    [dataproxy]
    timeout = 30
    keep_alive_seconds = 30
    tls_handshake_timeout_seconds = 10
    expect_continue_timeout_seconds = 1
    max_conns_per_host = 0
    max_idle_connections = 100
    idle_conn_timeout_seconds = 90
    send_user_header = false
    
    [alerting]
    enabled = true
    execute_alerts = true
    error_or_timeout = alerting
    nodata_or_nullvalues = no_data
    concurrent_render_limit = 5
    evaluation_timeout_seconds = 30
    notification_timeout_seconds = 30
    max_attempts = 3
    min_interval_seconds = 10
    
    [unified_alerting]
    enabled = true
    execute_alerts = true
    evaluation_timeout = 30s
    max_attempts = 3
    min_interval = 10s
    
    [smtp]
    enabled = true
    host = ${SMTP_HOST}:587
    user = ${SMTP_USER}
    password = ${SMTP_PASSWORD}
    cert_file =
    key_file =
    skip_verify = false
    from_address = alerts@astral-planner.com
    from_name = Astral Planner Monitoring
    ehlo_identity = grafana.astral-planner.com
    
    [log]
    mode = console file
    level = info
    format = json
    
    [log.console]
    level = info
    format = json
    
    [log.file]
    level = info
    format = json
    log_rotate = true
    max_lines = 1000000
    max_size_shift = 28
    daily_rotate = true
    max_days = 7
    
    [metrics]
    enabled = true
    interval_seconds = 10
    
    [tracing.jaeger]
    address = jaeger-collector:14268
    always_included_tag = tag1:value1
    sampler_type = const
    sampler_param = 1
    
    [feature_toggles]
    enable = publicDashboards,lokiExperimentalStreaming,traceToMetrics
    
    [auth]
    login_remember_days = 7
    login_maximum_inactive_lifetime_days = 30
    login_maximum_lifetime_days = 30
    token_rotation_interval_minutes = 10
    disable_login_form = false
    disable_signout_menu = false
    signout_redirect_url =
    oauth_auto_login = false
    
    [auth.anonymous]
    enabled = false
    
    [auth.github]
    enabled = false
    
    [auth.google]
    enabled = false
    
    [auth.generic_oauth]
    enabled = false
    
    [auth.jwt]
    enabled = false
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_id = 1
    auto_assign_org_role = Viewer
    verify_email_enabled = false
    login_hint = email or username
    password_hint = password
    default_theme = dark
    home_page =
    
    [org]
    name = Astral Planner
    
    [plugins]
    enable_alpha = false
    app_tls_skip_verify_insecure = false
    marketplace_url = https://grafana.com/grafana/plugins/
    
    [enterprise]
    license_path =
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring-ui
    app.kubernetes.io/part-of: monitoring-stack
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: monitoring-ui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: monitoring-ui
        app.kubernetes.io/part-of: monitoring-stack
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - grafana
              topologyKey: kubernetes.io/hostname
      
      initContainers:
      - name: init-chown-data
        image: busybox:1.35
        command: ["chown", "-R", "472:472", "/var/lib/grafana"]
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
      
      containers:
      - name: grafana
        image: grafana/grafana:10.1.2
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        
        env:
        - name: GF_PATHS_DATA
          value: /var/lib/grafana
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        - name: GRAFANA_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: db-host
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: db-user
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: db-password
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: redis-host
        - name: SMTP_HOST
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: smtp-host
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: smtp-user
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: smtp-password
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
          readOnly: true
        - name: storage
          mountPath: /var/lib/grafana
        - name: logs
          mountPath: /var/log/grafana
        - name: dashboards-provisioning
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: datasources-provisioning
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: dashboards-config
          mountPath: /var/lib/grafana/dashboards
          readOnly: true
        - name: tmp
          mountPath: /tmp
      
      volumes:
      - name: config
        configMap:
          name: grafana-config
          defaultMode: 0644
      - name: dashboards-provisioning
        configMap:
          name: grafana-dashboards-provisioning
          defaultMode: 0644
      - name: datasources-provisioning
        configMap:
          name: grafana-datasources
          defaultMode: 0644
      - name: dashboards-config
        configMap:
          name: grafana-dashboards
          defaultMode: 0644
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      
      terminationGracePeriodSeconds: 60
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring-ui
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring-ui
---
# Grafana Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: gp3-encrypted
  resources:
    requests:
      storage: 20Gi
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring-ui
---
# Data Sources Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: datasources
data:
  datasources.yaml: |
    apiVersion: 1
    
    deleteDatasources:
    - name: Prometheus
      orgId: 1
    
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus:9090
      basicAuth: false
      isDefault: true
      version: 1
      editable: false
      jsonData:
        httpMethod: POST
        manageAlerts: true
        prometheusType: Prometheus
        prometheusVersion: 2.47.0
        cacheLevel: 'High'
        disableRecordingRules: false
        incrementalQueryOverlapWindow: 10m
        queryTimeout: 60s
        timeInterval: "30s"
        tlsSkipVerify: false
        customQueryParameters: ""
      
    - name: Loki
      type: loki
      access: proxy
      orgId: 1
      url: http://loki:3100
      basicAuth: false
      isDefault: false
      version: 1
      editable: false
      jsonData:
        maxLines: 1000
        timeout: 60s
        tlsSkipVerify: false
    
    - name: Jaeger
      type: jaeger
      access: proxy
      orgId: 1
      url: http://jaeger-query:16686
      basicAuth: false
      isDefault: false
      version: 1
      editable: false
      jsonData:
        tracesToLogs:
          datasourceUid: 'loki'
          tags: ['job', 'instance', 'pod', 'namespace']
          mappedTags: [
            {
              key: 'service.name',
              value: 'service'
            }
          ]
          mapTagNamesEnabled: true
          spanStartTimeShift: '1h'
          spanEndTimeShift: '1h'
          filterByTraceID: false
          filterBySpanID: false
        tracesToMetrics:
          datasourceUid: 'prometheus'
          tags: [
            {
              key: 'service.name',
              value: 'service'
            },
            {
              key: 'job'
            }
          ]
          queries: [
            {
              name: 'Sample query',
              query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
            }
          ]
        nodeGraph:
          enabled: true
        search:
          hide: false
        spanBar:
          type: 'Tag'
          tag: 'http.path'
---
# Dashboard Provisioning
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-provisioning
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: dashboards
data:
  dashboards.yaml: |
    apiVersion: 1
    
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
    
    - name: 'astral-planner'
      orgId: 1
      folder: 'Astral Planner'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/astral-planner
    
    - name: 'infrastructure'
      orgId: 1
      folder: 'Infrastructure'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/infrastructure
    
    - name: 'business-metrics'
      orgId: 1
      folder: 'Business Metrics'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/business